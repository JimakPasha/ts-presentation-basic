-------------------------------------SLIDE-------------------------------------
Стоит сказать, что сейчас без TS не обходится практически ни один проект. И теперь это уже не желательное требование к новичкам, а обязательное. Не стоит пугаться, т.к. это новый язык. Я бы для начала отнесся к нему, как к надстройкой над языком JS, познав которую, вы поймете, что это очень крутая штука. Т.е. мы всё также пишем на JS, но используем некоторые дополнительные фичи. Также скажу, что в TS ооочень много новых деталей, однако далеко не все используются. Всё зависит для чего мы его применяем. Т.к. мы используем в дальнейшем React, то ts ложится на реакт весьма безболезненно. 
-------------------------------------SLIDE-------------------------------------
Я хочу чтобы вы поняли, что когда мы пишем TS, это значит, что мы пишем обычный JS код.
Т.е. всё что мы знаем о массивах, объектах, все фичи которые появились в es2015 (es6), все эти знания нам с вами понадобятся.
Всё что мы делаем в TS, это мы немного добавляем доп кода, чтобы управлять кое-чем, что называется система типов. Это по сути то, что представляет TS.
{демонстрируем песочницу}
-------------------------------------SLIDE-------------------------------------
[Помогает обнаруживать ошибки во время разработки]
- подумайте как мы обноруживаем ошибки, когда пишем код во время разработки. Т.е. мы пишем код JS и внутри нашего кода есть баг, и как нам проверить, что он там есть? По сути запустить код надо, чтобы проверить.
{демонстрируем в песочницах}

чтобы использывать эту проверку ошибок ts компилятор использует...
[...Использует "аннотации типов" для анализа нашего кода]
мы их можем рассматривать как комментарии для описания нашего кода

[Активна только во время разработки]
т.е. браузер воспринимает только JS, и TS код отбрасывается. Браузер и nodeJS понятия не имеет что такое TS.

-------------------------------------SLIDE-------------------------------------
Рассмотрим [Базовые типы]. Это самые простые, которые не вызовут у вас никаких трудностей. Но их существует больше и позже мы их с вами рассмотрим.

[NUMBER: числовое значение
STRING: строки
BOOLEAN: логическое значение true или false]

Но прежде чем мы начнём рассматривать типы. Хочу рассказать зчем же нам вообще нужны типы?
-------------------------------------SLIDE-------------------------------------

Мы можем выделить две такие важные причины
[Зачем нам нужны типы?]
[Типы используются TS компилятором для анализа нашего кода на предмет ошибок]
{демонстрируем в песочницах}
[Типы позволяют другим разработчикам понимать какие значения используются в нашем кода]
Бывает такая ситуация в боевом большом проекте ты открываешь JS код, смотришь на функцию, и вообще не понимаешь что там за входные параметры допустим, если у них ещё и нэминг которые ничего не говорит нам, то это может замедлять читаемость кода, а в ts мы описываем и прекрасно понимаем, какие аргументы мы должны передавать в функцию.
{демонстрируем в песочницах
и теперь давайте вернёмся к нашим базовым типам типам и попробуем их на практике
- пробуем в переменную всякое засунуть
- пробуем достучаться к методам и свойствам
}

-------------------------------------SLIDE-------------------------------------
В TS существует две разные системы
[Аннотации типов и вывод типов]
-------------------------------------SLIDE-------------------------------------
[Аннотации типов - Код, который мы добавляем для TS, чтобы он понял, значения какого типа будут содержаться в переменной]
[Вывод типов - TS пытается сам определить, значения какого типа будут содержаться в переменной]
Тут есть некоторые схожести, это то  что мы хотим знать значения какого типа будут содержаться в переменной.
В аннотации типов мы сми указываем, а в выводе TS сам догадывается.
{демонстрируем в песочницах}
Так когда же какую фичу мы используем?
В данном случае мы не должны добавлять аннотацию типов, но есть случаи, когда нужно, сейчас мы разберём.

Далее мы будем разбирать аннотации типов в функциях, там основы будут такие же, поэтому если всё понятно тут, тогда сложностей там не будет.
-------------------------------------SLIDE-------------------------------------
[Массивы]
[Типизированные массивы - Массивы, в которых каждый элемент - это значение определённого типа]
т.е. если мы создаём массив для строк, то этот массив будет содержать только строки. Технически мы можем помещать разные значения, тогда мы должны будем указывать аннотации специально.
{демонстрируем в песочницах}
-------------------------------------SLIDE-------------------------------------

[Когда использовать типизированные массивы? Каждый раз, когда нам нужно представить коллекцию записей в случайном порядке]
Подчёркиваю, что в именно в сулчайном порядке. Почему это важно? Потому что мы плавно с вами переходим к другому типу tuple или кортеж. Этот тип очень похож, но в нём есть небольшое отличие

-------------------------------------SLIDE-------------------------------------
Кортеж. Кортеж (tuple) - это структура, которая похожа на массив, в которой каждый элемент - это какое-то свойство записи
{демонстрируем в песочницах}

Вообще они очень не часто используются. Потому что объект является всё же более описательным. Ну об объектах мы бы говорили уже дальше, а так у меня всё в целом, спасибо за внимание, и теперь передаю слово вам готов послушать фитбэк, предложения, предложения и дальнейшие наши действия.
-------------------------------------SLIDE-------------------------------------
-------------------------------------SLIDE-------------------------------------
-------------------------------------SLIDE-------------------------------------
-------------------------------------SLIDE-------------------------------------
-------------------------------------SLIDE-------------------------------------
-------------------------------------SLIDE-------------------------------------
-------------------------------------SLIDE-------------------------------------
